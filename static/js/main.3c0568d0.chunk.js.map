{"version":3,"sources":["components/SortingAlgorithms/merge-sort.js","components/SortingAlgorithms/quick-sort.js","components/SortingAlgorithms/heap-sort.js","components/SortingAlgorithms/bubble-sort.js","components/SortingAlgorithms/insertion-sort.js","components/SortingAlgorithms/selection-sort.js","components/array-bars.js","components/SortingVisualizer/sorting-visualizer.js","components/App.js","index.js"],"names":["getMergeSortAnimations","array","animations","mergeSort","slice","length","arr","auxArray","left","right","mid","Math","floor","merge","auxArr","i","j","k","push","barOne","index","newHeight","barTwo","getQuickSortAnimations","quickSort","pi","partition","pivot","getHeapSortAnimations","heapSort","heapify","n","largest","getBubbleSortAnimations","bubbleSort","getInsertionSortAnimations","insertionSort","key","getSelectionSortAnimations","selectionSort","minIndex","ArrayBars","props","arrayBars","bars","map","bar","idx","className","style","backgroundColor","BAR_COLOR","height","SWAP_COLOR","resetArray","setArray","setDisable","random","sort","setDisableReset","setLoading","getAnimations","processAnimations","setTimeout","isComparison","bar1Index","bar2Index","compareAnimation","bar1","bar2","swapAnimation","comparison","ms","document","getElementsByClassName","color","arrayBar1","arrayBar2","SortingVisualizer","useState","disableReset","disable","mergeSortActive","setmergeSortActive","quickSortActive","setquickSortActive","heapSortActive","setheapSortActive","bubbleSortActive","setbubbleSortActive","insertionSortActive","setinsertionSortActive","selectionSortActive","setselectionSortActive","useEffect","Button","disabled","loading","onClick","content","active","inverted","App","body","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3c0568d0.chunk.js","sourcesContent":["export const getMergeSortAnimations = (array) => {\n  const animations = [];\n  mergeSort(array, array.slice(), 0, array.length - 1, animations);\n  return animations;\n};\n\nconst mergeSort = (arr, auxArray, left, right, animations) => {\n  if (left >= right) return;\n  const mid = Math.floor((left + right) / 2);\n  mergeSort(auxArray, arr, left, mid, animations);\n  mergeSort(auxArray, arr, mid + 1, right, animations);\n  merge(arr, auxArray, left, mid, right, animations);\n};\n\nconst merge = (arr, auxArr, left, mid, right, animations) => {\n  let i = left;\n  let j = mid + 1;\n  let k = left;\n  while (i <= mid && j <= right) {\n    animations.push([i, j, \"compare1\"]);\n    animations.push([i, j, \"compare2\"]);\n    if (auxArr[i] <= auxArr[j]) {\n      const barOne = { index: k, newHeight: auxArr[i] };\n      const barTwo = { index: k, newHeight: auxArr[i] };\n      animations.push([barOne, barTwo]);\n      animations.push([i, k, \"compare2\"]);\n      arr[k++] = auxArr[i++];\n    } else {\n      const barOne = { index: k, newHeight: auxArr[j] };\n      const barTwo = { index: k, newHeight: auxArr[j] };\n      animations.push([barOne, barTwo]);\n      animations.push([j, k, \"compare2\"]);\n      arr[k++] = auxArr[j++];\n    }\n  }\n  while (i <= mid) {\n    const barOne = { index: k, newHeight: auxArr[i] };\n    const barTwo = { index: k, newHeight: auxArr[i] };\n    animations.push([barOne, barTwo]);\n    animations.push([i, k, \"compare2\"]);\n    arr[k++] = auxArr[i++];\n  }\n  while (j <= right) {\n    const barOne = { index: k, newHeight: auxArr[j] };\n    const barTwo = { index: k, newHeight: auxArr[j] };\n    animations.push([barOne, barTwo]);\n    animations.push([j, k, \"compare2\"]);\n    arr[k++] = auxArr[j++];\n  }\n};\n","export const getQuickSortAnimations = (array) => {\n  const animations = [];\n  quickSort(array, 0, array.length - 1, animations);\n  return animations;\n};\n\nconst quickSort = (arr, left, right, animations) => {\n  if (left < right) {\n    const pi = partition(arr, left, right, animations);\n    quickSort(arr, left, pi - 1, animations);\n    quickSort(arr, pi + 1, right, animations);\n  }\n};\n\nconst partition = (arr, left, right, animations) => {\n  const pivot = arr[right];\n  let i = left - 1;\n  for (let j = left; j <= right - 1; j++) {\n    animations.push([j, right, \"compare1\"]);\n    animations.push([j, right, \"compare2\"]);\n    if (arr[j] < pivot) {\n      i++;\n      const barOne = { index: i, newHeight: arr[j] };\n      const barTwo = { index: j, newHeight: arr[i] };\n      animations.push([barOne, barTwo]);\n      animations.push([i, j, \"compare2\"]);\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n  }\n  const barOne = { index: i + 1, newHeight: arr[right] };\n  const barTwo = { index: right, newHeight: arr[i + 1] };\n  animations.push([barOne, barTwo]);\n  animations.push([i + 1, right, \"compare2\"]);\n  [arr[i + 1], arr[right]] = [arr[right], arr[i + 1]];\n  return i + 1;\n};\n","export const getHeapSortAnimations = (array) => {\n  const animations = [];\n  heapSort(array, animations);\n  return animations;\n};\n\nconst heapSort = (arr, animations) => {\n  for (let i = arr.length / 2 - 1; i >= 0; i--) {\n    heapify(arr, arr.length, i, animations);\n  }\n  for (let i = arr.length - 1; i > 0; i--) {\n    const barOne = { index: 0, newHeight: arr[i] };\n    const barTwo = { index: i, newHeight: arr[0] };\n    animations.push([barOne, barTwo]);\n    animations.push([0, i, \"compare2\"]);\n    [arr[0], arr[i]] = [arr[i], arr[0]];\n    heapify(arr, i, 0, animations);\n  }\n};\n\nconst heapify = (arr, n, i, animations) => {\n  let largest = i;\n  let left = 2 * i + 1;\n  let right = 2 * i + 2;\n\n  if (left < n && arr[left] > arr[largest]) {\n    animations.push([left, largest, \"compare1\"]);\n    animations.push([left, largest, \"compare2\"]);\n    largest = left;\n  }\n  if (right < n && arr[right] > arr[largest]) {\n    animations.push([right, largest, \"compare1\"]);\n    animations.push([right, largest, \"compare2\"]);\n    largest = right;\n  }\n  if (largest !== i) {\n    const barOne = { index: i, newHeight: arr[largest] };\n    const barTwo = { index: largest, newHeight: arr[i] };\n    animations.push([barOne, barTwo]);\n    animations.push([i, largest, \"compare2\"]);\n    [arr[i], arr[largest]] = [arr[largest], arr[i]];\n    heapify(arr, n, largest, animations);\n  }\n};\n","export const getBubbleSortAnimations = (array) => {\n  const animations = [];\n  bubbleSort(array, animations);\n  return animations;\n};\n\nconst bubbleSort = (arr, animations) => {\n  for (let i = 0; i < arr.length - 1; i++) {\n    for (let j = 0; j < arr.length - i - 1; j++) {\n      animations.push([j, j + 1, \"compare1\"]);\n      if (arr[j] > arr[j + 1]) {\n        const barOne = { index: j, newHeight: arr[j + 1] };\n        const barTwo = { index: j + 1, newHeight: arr[j] };\n        animations.push([barOne, barTwo]);\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n      }\n      animations.push([j, j + 1, \"compare2\"]);\n    }\n  }\n};\n","export const getInsertionSortAnimations = (array) => {\n  const animations = [];\n  insertionSort(array, animations);\n  return animations;\n};\n\nconst insertionSort = (arr, animations) => {\n  for (let i = 1; i < arr.length; i++) {\n    let key = arr[i];\n    let j = i - 1;\n    animations.push([j, j + 1, \"compare1\"]);\n    while (j >= 0 && arr[j] > key) {\n      animations.push([j, j + 1, \"compare2\"]);\n      const barOne = { index: j + 1, newHeight: arr[j] };\n      const barTwo = { index: j + 1, newHeight: arr[j] };\n      animations.push([barOne, barTwo]);\n      animations.push([j + 1, j + 1, \"compare2\"]);\n      arr[j + 1] = arr[j];\n      j--;\n      if (j >= 0) {\n        animations.push([j, j + 1, \"compare1\"]);\n      }\n    }\n    if (j >= 0) {\n      animations.push([j, j + 1, \"compare2\"]);\n    }\n    const barOne = { index: j + 1, newHeight: key };\n    const barTwo = { index: j + 1, newHeight: key };\n    animations.push([barOne, barTwo]);\n    animations.push([j + 1, j + 1, \"compare2\"]);\n    arr[j + 1] = key;\n  }\n};\n","export const getSelectionSortAnimations = (array) => {\n  const animations = [];\n  selectionSort(array, animations);\n  return animations;\n};\n\nconst selectionSort = (arr, animations) => {\n  for (let i = 0; i < arr.length - 1; i++) {\n    let minIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      animations.push([minIndex, j, \"compare1\"]);\n      animations.push([minIndex, j, \"compare2\"]);\n      if (arr[j] < arr[minIndex]) {\n        minIndex = j;\n      }\n    }\n    const barOne = { index: minIndex, newHeight: arr[i] };\n    const barTwo = { index: i, newHeight: arr[minIndex] };\n    animations.push([barOne, barTwo]);\n    animations.push([minIndex, i, \"compare2\"]);\n    [arr[minIndex], arr[i]] = [arr[i], arr[minIndex]];\n  }\n};\n","import React from \"react\";\nimport { BAR_COLOR } from \"./SortingVisualizer/sorting-visualizer.js\";\n\nconst ArrayBars = (props) => {\n  const bars = props.bars;\n  const arrayBars = bars.map((bar, idx) => (\n    <div\n      className=\"array-bar\"\n      key={idx}\n      style={{\n        backgroundColor: BAR_COLOR,\n        height: `${bar}px`,\n      }}\n    />\n  ));\n  return <div>{arrayBars}</div>;\n};\n\nexport default ArrayBars;\n","import React, { useEffect, useState } from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport { getMergeSortAnimations } from \"../SortingAlgorithms/merge-sort.js\";\nimport { getQuickSortAnimations } from \"../SortingAlgorithms/quick-sort.js\";\nimport { getHeapSortAnimations } from \"../SortingAlgorithms/heap-sort.js\";\nimport { getBubbleSortAnimations } from \"../SortingAlgorithms/bubble-sort.js\";\nimport { getInsertionSortAnimations } from \"../SortingAlgorithms/insertion-sort.js\";\nimport { getSelectionSortAnimations } from \"../SortingAlgorithms/selection-sort.js\";\nimport ArrayBars from \"../array-bars.js\";\nimport \"./sorting-visualizer.css\";\n\n// Color of array bars\nexport const BAR_COLOR = \"MediumPurple\";\n// Color of array bars when performing comparison\nconst COMPARE_COLOR = \"White\";\n// Color of array bars when performing swap\nconst SWAP_COLOR = \"Yellow\";\n// Speed of compare and swap animations\nconst ANIMATION_SPEED = 1;\n// Array length\nconst BAR_ARRAY_LENGTH = 140;\n// Max size of bars in array\nconst MAX_BAR_SIZE = 512;\n// Min size of bars in array\nconst MIN_BAR_SIZE = 5;\n\n/**\n * Creates a new array of random values and replaces the current array.\n * @param setArray,\n * @param setDisable\n */\nconst resetArray = (setArray, setDisable) => {\n  const array = [];\n  for (let i = 0; i < BAR_ARRAY_LENGTH; i++) {\n    // Push value random value betwen MIN_BAR_SIZE and MAX_BAR_SIZE onto array\n    array.push(Math.floor(Math.random() * MAX_BAR_SIZE) + MIN_BAR_SIZE);\n  }\n  // Replace existing array with new randomly generated one\n  setArray(array);\n  // Enable sorting buttons after reset\n  setDisable(false);\n};\n\n/**\n * Sorts array according to which algorithm passed in by getAnimations\n * @param array\n * @param setDisableReset,\n * @param setDisable\n * @param setLoading,\n * @param getAnimations\n */\nconst sort = (\n  array,\n  setDisableReset,\n  setDisable,\n  setLoading,\n  getAnimations\n) => {\n  // Disable buttons while animations are processing\n  setDisableReset(true);\n  setDisable(true);\n  setLoading(true);\n  const animations = getAnimations(array);\n  processAnimations(animations);\n  //Enable buttons when animations are done processing\n  setTimeout(() => {\n    setDisableReset(false);\n    setLoading(false);\n  }, animations.length * ANIMATION_SPEED);\n};\n\n/**\n * Processes and renders sorting animations\n * @param animations\n */\nconst processAnimations = (animations) => {\n  for (let i = 0; i < animations.length; i++) {\n    // Check if compare or swap animation\n    const isComparison = animations[i][2];\n    if (isComparison) {\n      const [bar1Index, bar2Index] = animations[i];\n      compareAnimation(bar1Index, bar2Index, isComparison, i * ANIMATION_SPEED);\n    } else {\n      const [bar1, bar2] = animations[i];\n      swapAnimation(bar1, bar2, i * ANIMATION_SPEED);\n    }\n  }\n};\n\n/**\n * Process and render compare animation\n * @param bar1Index\n * @param bar2Index\n * @param comparison\n * @param ms\n */\nconst compareAnimation = (bar1Index, bar2Index, comparison, ms) => {\n  const arrayBars = document.getElementsByClassName(\"array-bar\");\n  const bar1 = arrayBars[bar1Index];\n  const bar2 = arrayBars[bar2Index];\n  const color = comparison === \"compare1\" ? COMPARE_COLOR : BAR_COLOR;\n  setTimeout(() => {\n    bar1.style.backgroundColor = color;\n    bar2.style.backgroundColor = color;\n  }, ms);\n};\n\n/**\n * Process and render swap animation\n * @param bar1Index\n * @param bar2Index\n * @param comparison\n * @param ms\n */\nconst swapAnimation = (bar1, bar2, ms) => {\n  const arrayBars = document.getElementsByClassName(\"array-bar\");\n  const arrayBar1 = arrayBars[bar1.index];\n  const arrayBar2 = arrayBars[bar2.index];\n  setTimeout(() => {\n    arrayBar1.style.height = `${bar1.newHeight}px`;\n    arrayBar2.style.height = `${bar2.newHeight}px`;\n    arrayBar1.style.backgroundColor = SWAP_COLOR;\n    arrayBar2.style.backgroundColor = SWAP_COLOR;\n  }, ms);\n};\n\n/**\n * Process and render swap animation\n * @param bar1Index\n * @param bar2Index\n * @param comparison\n * @param ms\n */\nconst SortingVisualizer = () => {\n  const [array, setArray] = useState([]);\n  const [disableReset, setDisableReset] = useState(false);\n  const [disable, setDisable] = useState(false);\n  const [mergeSortActive, setmergeSortActive] = useState(false);\n  const [quickSortActive, setquickSortActive] = useState(false);\n  const [heapSortActive, setheapSortActive] = useState(false);\n  const [bubbleSortActive, setbubbleSortActive] = useState(false);\n  const [insertionSortActive, setinsertionSortActive] = useState(false);\n  const [selectionSortActive, setselectionSortActive] = useState(false);\n\n  useEffect(() => resetArray(setArray, setDisable), []);\n\n  return (\n    <div className=\"sorting-visualizer-container\">\n      <ArrayBars bars={array} />\n      <Button\n        disabled={disableReset}\n        loading={disableReset}\n        color=\"violet\"\n        onClick={() => resetArray(setArray, setDisable)}\n        content=\"Reset\"\n      />\n      <Button\n        disabled={disable}\n        active={mergeSortActive}\n        inverted\n        onClick={() => {\n          sort(\n            array.slice(),\n            setDisableReset,\n            setDisable,\n            setmergeSortActive,\n            getMergeSortAnimations\n          );\n        }}\n        content=\"Merge Sort\"\n      />\n      <Button\n        disabled={disable}\n        active={quickSortActive}\n        inverted\n        onClick={() =>\n          sort(\n            array.slice(),\n            setDisableReset,\n            setDisable,\n            setquickSortActive,\n            getQuickSortAnimations\n          )\n        }\n        content=\"Quick Sort\"\n      />\n      <Button\n        disabled={disable}\n        active={heapSortActive}\n        inverted\n        onClick={() =>\n          sort(\n            array.slice(),\n            setDisableReset,\n            setDisable,\n            setheapSortActive,\n            getHeapSortAnimations\n          )\n        }\n        content=\"Heap Sort\"\n      />\n      <Button\n        disabled={disable}\n        active={bubbleSortActive}\n        inverted\n        onClick={() =>\n          sort(\n            array.slice(),\n            setDisableReset,\n            setDisable,\n            setbubbleSortActive,\n            getBubbleSortAnimations\n          )\n        }\n        content=\"Bubble Sort\"\n      />\n      <Button\n        disabled={disable}\n        active={insertionSortActive}\n        inverted\n        onClick={() =>\n          sort(\n            array.slice(),\n            setDisableReset,\n            setDisable,\n            setinsertionSortActive,\n            getInsertionSortAnimations\n          )\n        }\n        content=\"Insertion Sort\"\n      />\n      <Button\n        disabled={disable}\n        active={selectionSortActive}\n        inverted\n        onClick={() =>\n          sort(\n            array.slice(),\n            setDisableReset,\n            setDisable,\n            setselectionSortActive,\n            getSelectionSortAnimations\n          )\n        }\n        content=\"Selection Sort\"\n      />\n    </div>\n  );\n};\n\nexport default SortingVisualizer;\n","import React, { useEffect } from \"react\";\nimport SortingVisualizer from \"./SortingVisualizer/sorting-visualizer\";\nimport \"./App.css\";\n\nconst BACKGROUND_COLOR = \"#1e1e1e\";\n\nconst App = () => {\n  useEffect(() => {\n    document.body.style.backgroundColor = BACKGROUND_COLOR;\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <SortingVisualizer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}